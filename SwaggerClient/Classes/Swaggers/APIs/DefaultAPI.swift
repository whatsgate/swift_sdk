//
// DefaultAPI.swift
//
// Generated by swagger-codegen
// https://github.com/swagger-api/swagger-codegen
//

import Foundation
import Alamofire


open class DefaultAPI {
    /**
     Проверка зарегистрирован ли номер в WhatsApp

     - parameter body: (body) Проверяет, зарегистрирован ли указанный номер в WhatsApp. Номер указывается в формате только цифр, например 79999999999 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func checkPost(body: CheckBody, completion: @escaping ((_ data: InlineResponse2001?,_ error: Error?) -> Void)) {
        checkPostWithRequestBuilder(body: body).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Проверка зарегистрирован ли номер в WhatsApp
     - POST /check
     - 

     - API Key:
       - type: apiKey X-API-Key 
       - name: ApiKeyAuth
     - examples: [{contentType=application/json, example={
  "result" : "result",
  "data" : true
}}]
     - parameter body: (body) Проверяет, зарегистрирован ли указанный номер в WhatsApp. Номер указывается в формате только цифр, например 79999999999 

     - returns: RequestBuilder<InlineResponse2001> 
     */
    open class func checkPostWithRequestBuilder(body: CheckBody) -> RequestBuilder<InlineResponse2001> {
        let path = "/check"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: body)
        let url = URLComponents(string: URLString)


        let requestBuilder: RequestBuilder<InlineResponse2001>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }
    /**
     Возвращает список активных чатов

     - parameter body: (body) Запрашивает и возвращает список активных чатов, включая контакты и группы. В объекте группы находится идентификатор группы, список всех участников группы, права участников (является ли участник администратором группы). 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getChatsPost(body: GetchatsBody, completion: @escaping ((_ data: InlineResponse2002?,_ error: Error?) -> Void)) {
        getChatsPostWithRequestBuilder(body: body).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Возвращает список активных чатов
     - POST /get-chats
     - 

     - API Key:
       - type: apiKey X-API-Key 
       - name: ApiKeyAuth
     - examples: [{contentType=application/json, example={
  "result" : "result",
  "data" : [ {
    "pinned" : true,
    "isReadOnly" : true,
    "name" : "name",
    "unreadCount" : 0,
    "muteExpiration" : true,
    "id" : "id",
    "groupMetadata" : {
      "owner" : "owner",
      "size" : 5,
      "id" : "id",
      "creation" : 1,
      "participants" : [ {
        "isSuperAdmin" : true,
        "id" : "id",
        "isAdmin" : true
      }, {
        "isSuperAdmin" : true,
        "id" : "id",
        "isAdmin" : true
      } ]
    },
    "isGroup" : true,
    "isMuted" : true,
    "timestamp" : 6
  }, {
    "pinned" : true,
    "isReadOnly" : true,
    "name" : "name",
    "unreadCount" : 0,
    "muteExpiration" : true,
    "id" : "id",
    "groupMetadata" : {
      "owner" : "owner",
      "size" : 5,
      "id" : "id",
      "creation" : 1,
      "participants" : [ {
        "isSuperAdmin" : true,
        "id" : "id",
        "isAdmin" : true
      }, {
        "isSuperAdmin" : true,
        "id" : "id",
        "isAdmin" : true
      } ]
    },
    "isGroup" : true,
    "isMuted" : true,
    "timestamp" : 6
  } ]
}}]
     - parameter body: (body) Запрашивает и возвращает список активных чатов, включая контакты и группы. В объекте группы находится идентификатор группы, список всех участников группы, права участников (является ли участник администратором группы). 

     - returns: RequestBuilder<InlineResponse2002> 
     */
    open class func getChatsPostWithRequestBuilder(body: GetchatsBody) -> RequestBuilder<InlineResponse2002> {
        let path = "/get-chats"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: body)
        let url = URLComponents(string: URLString)


        let requestBuilder: RequestBuilder<InlineResponse2002>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }
    /**
     Отправляет команду в чат, что последние сообщения просмотрены

     - parameter body: (body) Команда устанавливает у всех сообщений в указанном чате статус просмотрены. 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func seenPost(body: SeenBody, completion: @escaping ((_ data: InlineResponse2004?,_ error: Error?) -> Void)) {
        seenPostWithRequestBuilder(body: body).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Отправляет команду в чат, что последние сообщения просмотрены
     - POST /seen
     - 

     - API Key:
       - type: apiKey X-API-Key 
       - name: ApiKeyAuth
     - examples: [{contentType=application/json, example={
  "result" : "result"
}}]
     - parameter body: (body) Команда устанавливает у всех сообщений в указанном чате статус просмотрены. 

     - returns: RequestBuilder<InlineResponse2004> 
     */
    open class func seenPostWithRequestBuilder(body: SeenBody) -> RequestBuilder<InlineResponse2004> {
        let path = "/seen"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: body)
        let url = URLComponents(string: URLString)


        let requestBuilder: RequestBuilder<InlineResponse2004>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }
    /**
     Отправка сообщения

     - parameter body: (body) Отправляет текстовое или мультимедийное сообщение контакту либо группе. Может использоваться синхронно (возвращает ответ после отправки сообщения, ответ содержит объект отправленного сообщения с идентификатором), либо асинхронно (ответ содержит результат постановки в очередь, а отправленное сообщение приходит на указанный webhook). По умолчанию используется асинхронная отправка. 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func sendMessage(body: SendBody, completion: @escaping ((_ data: InlineResponse200?,_ error: Error?) -> Void)) {
        sendMessageWithRequestBuilder(body: body).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Отправка сообщения
     - POST /send
     - 

     - API Key:
       - type: apiKey X-API-Key 
       - name: ApiKeyAuth
     - examples: [{contentType=application/json, example={
  "result" : ""
}}]
     - parameter body: (body) Отправляет текстовое или мультимедийное сообщение контакту либо группе. Может использоваться синхронно (возвращает ответ после отправки сообщения, ответ содержит объект отправленного сообщения с идентификатором), либо асинхронно (ответ содержит результат постановки в очередь, а отправленное сообщение приходит на указанный webhook). По умолчанию используется асинхронная отправка. 

     - returns: RequestBuilder<InlineResponse200> 
     */
    open class func sendMessageWithRequestBuilder(body: SendBody) -> RequestBuilder<InlineResponse200> {
        let path = "/send"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: body)
        let url = URLComponents(string: URLString)


        let requestBuilder: RequestBuilder<InlineResponse200>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }
}
